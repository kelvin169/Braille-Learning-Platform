#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Servo.h>

// Replace with your network credentials
const char* ssid = "Mwaniki_kev";
const char* password = "whyMe";

ESP8266WebServer server(80);

// Define the pins for the 6 servo motors
Servo servos[6];
int servoPins[6] = {D1, D2, D3, D4, D5, D6}; // Adjust pins based on your wiring

// Braille dot positions for each character and number
const int BRAILLE_DOTS[36][6] = {
    {1, 0, 0, 0, 0, 0}, // A
    {1, 1, 0, 0, 0, 0}, // B
    {1, 0, 0, 1, 0, 0}, // C
    {1, 0, 0, 1, 1, 0}, // D
    {1, 0, 0, 0, 1, 0}, // E
    {1, 1, 0, 1, 0, 0}, // F
    {1, 1, 0, 1, 1, 0}, // G
    {1, 1, 0, 0, 1, 0}, // H
    {0, 1, 0, 1, 0, 0}, // I
    {0, 1, 0, 1, 1, 0}, // J
    {1, 0, 1, 0, 0, 0}, // K
    {1, 1, 1, 0, 0, 0}, // L
    {1, 0, 1, 1, 0, 0}, // M
    {1, 0, 1, 1, 1, 0}, // N
    {1, 0, 1, 0, 1, 0}, // O
    {1, 1, 1, 1, 0, 0}, // P
    {1, 1, 1, 1, 1, 0}, // Q
    {1, 1, 1, 0, 1, 0}, // R
    {0, 1, 1, 1, 0, 0}, // S
    {0, 1, 1, 1, 1, 0}, // T
    {1, 0, 1, 0, 0, 1}, // U
    {1, 1, 1, 0, 0, 1}, // V
    {0, 1, 0, 1, 1, 1}, // W
    {1, 0, 1, 1, 0, 1}, // X
    {1, 0, 1, 1, 1, 1}, // Y
    {1, 0, 1, 0, 1, 1}, // Z
    {0, 0, 1, 1, 1, 1}, // Numeric Indicator
    {1, 0, 0, 0, 0, 0}, // 1
    {1, 1, 0, 0, 0, 0}, // 2
    {1, 0, 0, 1, 0, 0}, // 3
    {1, 0, 0, 1, 1, 0}, // 4
    {1, 0, 0, 0, 1, 0}, // 5
    {0, 0, 0, 0, 0, 0}, // Space
    {0, 1, 1, 0, 0, 1}  // Full Stop
};

String inputHistory = ""; // To store the history of inputs

void setup() {
    Serial.begin(115200);

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    Serial.println(WiFi.localIP());

    // Attach servos to pins
    for (int i = 0; i < 6; i++) {
        servos[i].attach(servoPins[i]);
        servos[i].write(0); // Initialize servos to 0 degrees
    }

    // Define server routes
    server.on("/", HTTP_GET, handleRoot);
    server.on("/update", HTTP_POST, handleUpdate);

    // Start the server
    server.begin();
    Serial.println("HTTP server started");
}

void loop() {
    server.handleClient();
}

void handleRoot() {
    String html = "<!DOCTYPE html><html><head><title>Braille Input</title></head><body>";
    html += "<h1>Writing Mode</h1>";
    html += "<h2>Braille Input</h2>";
    html += "<input type='text' id='brailleInput' maxlength='1' placeholder='Enter a character'>";
    html += "<button onclick='sendCharacter()'>Submit</button>";
    html += "<h3>Input History (max 10 characters):</h3><div id='history'>" + inputHistory + "</div>";
    html += "<script>function sendCharacter() {";
    html += "const input = document.getElementById('brailleInput').value;";
    html += "if (input.length === 1) {";
    html += "fetch('/update', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ character: input.toUpperCase() }) });";
    html += "} else { alert('Please enter a single character.'); } }</script>";
    html += "</body></html>";
    server.send(200, "text/html", html);
}

void handleUpdate() {
    if (server.hasArg("plain")) {
        String body = server.arg("plain");
        char character = body.charAt(body.indexOf(':') + 2); // Extract character from JSON

        if ((character >= 'A' && character <= 'Z') || (character >= '0' && character <= '9')) {
            inputHistory += String(character);
            if (inputHistory.length() > 10) {
                inputHistory = inputHistory.substring(inputHistory.length() - 10); // Keep the last 10 characters
            }

            int index;
            if (character >= 'A' && character <= 'Z') {
                index = character - 'A';
            } else {
                index = 26 + (character == '0' ? 10 : (character - '1'));
                for (int i = 0; i < 6; i++) {
                    servos[i].write(BRAILLE_DOTS[26][i] == 1 ? 180 : 0); // Numeric Indicator
                }
                delay(1000); // Pause for numeric indicator
            }
            for (int i = 0; i < 6; i++) {
                servos[i].write(BRAILLE_DOTS[index][i] == 1 ? 180 : 0);
            }

            server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Braille updated for " + String(character) + "\"}");
        } else {
            server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid character\"}");
        }
    } else {
        server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"No data received\"}");
    }
}
